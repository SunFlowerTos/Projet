#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>
#include <ctype.h>

int main()
{
    int longueur;
    char entree_longueur [1024];
    printf("La longueur du mot de passe que vous voulez : \n");
    scanf("%s", entree_longueur);
    int i = 0;
    while (entree_longueur[i] != '\0')
    {
        if (!isdigit(entree_longueur[i]))
        {
            printf("Veuillez entrer un nombre.\n");
            return 1;
        }
        i++;
    }
    // Convertir la chaîne en entier
    longueur = atoi(entree_longueur);
    if (longueur <= 0)
    {
        printf("La longueur du mot de passe doit être de minimum 1 \n");
        // si return 1 = probleme 
        return 1;
    }
    // on alloue la memoire pour pouvoir stocker le mot de passe et on ajoute +1 pour le caractére null à la fin de la string 
    char *password = malloc(longueur + 1);

    // If we are using newer versions of C such as C99 onwards we could declare
    // a password char array on the stack as a local variable with:
    //
    // char password[longueur + 1];
    //
    // A local variable would no longer exist when the function returns so in
    // this example the password is kept as dynamically allocated memory so that
    // a pointer to the password can be maintained so long as it is still needed.

    // We'll randomly create the password with a combination of nombre, lowercase
    // letters, uppercase letters, and symboles.  We create 4 string literals for
    // each "type" of character, and obtain the longueur of each to help us randomly
    // select characters from each string literal (see below).

    char *nombre = "0123456789";
    int nombre_longueur = strlen(nombre);

    char *lettre_minuscule = "abcdefghijklmnopqrstuwxyz";
    int lettre_minuscule_longueur = strlen(lettre_minuscule);

    char *lettre_majusucle = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    int lettre_majusucle_longueur = strlen(lettre_majusucle);

    char *symboles = "!@#$%^&*()_-' '"; // l'espace entre ' et ' est fait expres pour avoir le caractères espaces dans un mot de passe 
    int symboles_longueur = strlen(symboles);

    // A mettre en place 
    // char *espaces = "_";
    // int espaces_longueur = strlen(espaces);

    // We need to seed the random number generator with a value that will be
    // different each time our program runs in order to get different sequences
    // of random numbers each time our program runs.  time(NULL) will give us
    // the current time as represented by an integer, which will be different
    // each time the program runs.  We multiply the current time by the process
    // id of the running program as provided by getpid() to improve the seed
    // by making it 'more unique', and we pass this as an argument to the
    // srand() function to seed the random number generation.
    srand(time(NULL) * getpid());

    // Loop through each index in the password string from i = 0 .. longueur and
    // set it to a random character
    for (int i = 0; i < longueur; i++)
    {
        // First we randomly choose a TYPE of character by setting char_type to
        // 0,1,2, or 3 at random.  The rand() function will return a random
        // integer between 0 and a very large number (RAND_MAX) and % 4 will
        // return the remainder of dividing this number by 4... i.e. either
        // 0,1,2, or 3!
        int char_type = rand() % 4;

        // Use the char_type value to determine the type of character (digit,
        // lowercase letter, uppercase letter, symbol) for the next index
        // in the password string as specified by the counter variable i.  We
        // then randomly select a character from the specific string literal
        // (e.g. lettre_minuscule[ ... ]) by using the same technique as above and we
        // set the password string at this index to this character.
        //
        // i.e. rand() % lettre_minuscule_longueur
        //
        // will give us a random integer in the range 0 ... lettre_minuscule_longueur-1,
        // which is exactly the range of indexes in the lettre_minuscule string literal.
        //
        if (char_type == 0)
            password[i] = nombre[rand() % nombre_longueur];
        else if (char_type == 1)
            password[i] = lettre_minuscule[rand() % lettre_minuscule_longueur];
        else if (char_type == 2)
            password[i] = lettre_majusucle[rand() % lettre_majusucle_longueur];
        else
            password[i] = symboles[rand() % symboles_longueur];
    }

    // Add the null terminator to the end of the password char array to terminate
    // the string
    password[longueur] = '\0';
    printf("Password: %s\n", password);
    free(password);
    return 0;
}
